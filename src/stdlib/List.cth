intrinsic {
  fn array_key_exists(Int, ['a]) -> Bool;
  fn subscript(['a], Int) -> 'a;
  fn count(['a]) -> Int;
  fn prepend('a, ['a]) -> ['a];
}

#[inline]
pub fn nth(ls: ['a], n: Int) -> Maybe('a) {
  if array_key_exists(n, ls) {
    Maybe::Some(subscript(ls, n))
  } else {
    Maybe::None
  }
}

#[inline]
pub fn length(ls: ['a]) -> Int {
  count(ls)
}

pub fn iter(f: 'a -> (), ls: ['a]) -> () {
  match ls {
    []           => (),
    [ a, ...as ] => {
      f(a);
      iter(f, as);
    },
  }
}

fn map_aux(f: 'a -> 'b, la: ['a], lb: ['b]) -> ['b] {
  match la {
    []               => lb,
    [first, ...rest] => map_aux(f, rest, prepend(f(first), lb)),
  }
}

pub fn map(f: 'a -> 'b, ls: ['a]) -> ['b] {
  map_aux(f, ls, [])
}
