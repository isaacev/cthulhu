intrinsic {
  fn array_key_exists(Int, ['a]) -> Bool;
  fn subscript(['a], Int) -> 'a;
  fn count(['a]) -> Int;
  fn prepend('a, ['a]) -> ['a];
}

pub fn nth(ls: ['a], n: Int) -> Maybe('a) {
  if array_key_exists(n, ls) {
    Maybe::Some(subscript(ls, n))
  } else {
    Maybe::None
  }
}

pub fn length(ls: ['a]) -> Int {
  count(ls)
}

pub fn iter(callback: 'a -> (), inputs: ['a]) -> () {
  match inputs {
    []               => (),
    [first, ...rest] => {
      callback(first);
      iter(callback, rest)
    },
  }
}

fn map_aux(callback: 'a -> 'b, inputs: ['a], outputs: ['b]) -> ['b] {
  match inputs {
    []               => outputs,
    [first, ...rest] => {
      map_aux(callback, rest, prepend(callback(first), outputs))
    },
  }
}

pub fn map(callback: 'a -> 'b, inputs: ['a]) -> ['b] {
  map_aux(callback, inputs, [])
}
