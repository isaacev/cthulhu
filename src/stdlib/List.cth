intrinsic {
  fn array_key_exists(Int, ['a]) -> Bool;
  fn subscript(['a], Int) -> 'a;
  fn count(['a]) -> Int;
  fn for_each('a -> (), ['a]) -> ();
  fn for_each_with_index(Int -> 'a -> (), ['a]) -> ();
}

#[inline]
pub fn nth(ls: ['a], n: Int) -> Maybe('a) {
  if array_key_exists(n, ls) {
    Maybe::Some(subscript(ls, n))
  } else {
    Maybe::None
  }
}

#[inline]
pub fn length(ls: ['a]) -> Int {
  count(ls)
}

#[inline]
pub fn iter(f: 'a -> (), l: ['a]) -> () {
  for_each(f, l);
}

#[inline]
pub fn iter_index(f: Int -> 'a -> (), l: ['a]) -> () {
  for_each_with_index(f, l);
}
