use ::Io;
use ::Fmt;
use ::List;

type Shape =
  | UnitCircle
  | Circle(Float)
  | Square(Float)
  | Rect { width: Float, height: Float };

fn name(sh: Shape) -> Str {
  match sh {
    UnitCircle => "unit circle",
    Circle(1.0) => "unit circle",
    Circle(_) => "circle",
    Square(_) => "square",
    Rect { width: _, height: _ } => "rectangle",
  }
}

fn area(sh: Shape) -> Float {
  match sh {
    UnitCircle => 3.14,
    Circle(1.0) => 3.14,
    Circle(r) => 3.14 *. r *. r,
    Square(s) => s *. s,
    Rect { width: w, height: h } => w *. h,
  }
}

fn desc(sh: Shape) -> () {
  Io::println(name(sh) ++ " has an area of " ++ Fmt::float(area(sh)));
}

#[entry]
fn main() -> () {
  let u = UnitCircle;
  let v = Circle(1.0);
  let c = Circle(5.0);
  let s = Square(3.0);
  let r = Rect { width: 4.0, height: 3.0 };

  [ u, v, c, s, r] |> List::iter(desc);
}
